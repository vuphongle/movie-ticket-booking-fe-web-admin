import {
  Form,
  Input,
  InputNumber,
  Modal,
  Select,
  Switch,
  Row,
  Col,
  message,
  DatePicker,
} from "antd";
import { useEffect } from "react";
import { useTranslation } from "react-i18next";
import {
  useCreateCouponDetailMutation,
  useUpdateCouponDetailMutation,
} from "@/app/services/coupons.service";
import { useGetSeatTypeOptionsQuery } from "@/app/services/seatType.service";
import { useGetAdditionalServicesQuery } from "@/app/services/additionalServices.service";
import ProductSelect from "@/components/ProductSelect";
import type { CouponDetail, Coupon } from "@/types";
import dayjs from "dayjs";
import isSameOrBefore from "dayjs/plugin/isSameOrBefore";
import isSameOrAfter from "dayjs/plugin/isSameOrAfter";

dayjs.extend(isSameOrBefore);
dayjs.extend(isSameOrAfter);

const { Option } = Select;
const { TextArea } = Input;

interface CouponDetailModalProps {
  couponId: number;
  coupon?: Coupon;
  detail?: CouponDetail;
  open: boolean;
  onCancel: () => void;
  onSuccess?: () => void;
}

const CouponDetailModal = ({
  couponId,
  coupon,
  detail,
  open,
  onCancel,
  onSuccess,
}: CouponDetailModalProps) => {
  const { t } = useTranslation();
  const [form] = Form.useForm();
  const isEditing = !!detail;

  const [createDetail, { isLoading: isCreating }] =
    useCreateCouponDetailMutation();
  const [updateDetail, { isLoading: isUpdating }] =
    useUpdateCouponDetailMutation();

  // Get seat type options for dropdown
  const { data: seatTypeOptions = [], isLoading: isLoadingSeatTypes } =
    useGetSeatTypeOptionsQuery();

  // Get additional services for dropdown
  const { data: additionalServices = [], isLoading: isLoadingServices } =
    useGetAdditionalServicesQuery();
  // Temporary simplification: remove complex date validation since new CouponDetail schema is simpler
  useEffect(() => {
    if (detail) {
      // Fill with simplified detail fields
      form.setFieldsValue({
        targetType: detail.targetType || "ORDER",
        giftServiceId: detail.giftServiceId,
      });
    } else {
      // Set defaults for new detail
      form.resetFields();
      form.setFieldsValue({
        targetType: "ORDER",
      });
    }
  }, [detail, form, coupon]);

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();

      // Convert dayjs objects to date-only strings for API (preserving local timezone)
      const submitValues = {
        ...values,
        startDate: values.startDate
          ? values.startDate.startOf("day").toISOString()
          : undefined,
        endDate: values.endDate
          ? values.endDate.endOf("day").toISOString()
          : undefined,
      };

      if (isEditing) {
        await updateDetail({
          couponId,
          detailId: detail!.id,
          ...submitValues,
        }).unwrap();
        message.success(t("COUPON_DETAIL_UPDATE_SUCCESS"));
      } else {
        await createDetail({
          couponId,
          ...submitValues,
        }).unwrap();
        message.success(t("COUPON_DETAIL_CREATE_SUCCESS"));
      }

      onSuccess?.();
    } catch (error: any) {
      message.error(error.data?.message || t("COUPON_DETAIL_ERROR"));
    }
  };

  const benefitType = Form.useWatch("benefitType", form);
  const targetType = Form.useWatch("targetType", form);

  // Function to get translated seat type name
  const getSeatTypeName = (seatTypeId: number) => {
    const seatTypeMap = {
      1: t("SEAT_TYPE_REGULAR"),
      2: t("SEAT_TYPE_VIP"),
      3: t("SEAT_TYPE_COUPLE"),
    };
    return (
      seatTypeMap[seatTypeId as keyof typeof seatTypeMap] ||
      `${t("SEAT_TYPE_DEFAULT")} ${seatTypeId}`
    );
  };

  // Reset targetRefId when targetType changes and re-validate
  useEffect(() => {
    if (targetType === "ORDER") {
      form.setFieldValue("targetRefId", null);
    }
    // Re-validate targetRefId field when targetType changes
    form.validateFields(["targetRefId"]).catch(() => {
      // Ignore validation errors, just trigger re-validation
    });
  }, [targetType, form]);

  // Reset benefit-related fields when benefitType changes
  useEffect(() => {
    if (benefitType === "DISCOUNT_PERCENT") {
      form.setFieldsValue({
        amount: undefined,
        giftServiceId: undefined,
        giftQuantity: undefined,
      });
    } else if (benefitType === "DISCOUNT_AMOUNT") {
      form.setFieldsValue({
        percent: undefined,
        giftServiceId: undefined,
        giftQuantity: undefined,
      });
    } else if (benefitType === "FREE_PRODUCT") {
      form.setFieldsValue({ percent: undefined, amount: undefined });
    }
  }, [benefitType, form]);

  return (
    <Modal
      title={
        isEditing ? t("COUPON_DETAIL_EDIT_TITLE") : t("COUPON_DETAIL_ADD_TITLE")
      }
      open={open}
      onCancel={onCancel}
      onOk={handleSubmit}
      okText={
        isEditing
          ? t("COUPON_DETAIL_UPDATE_BTN")
          : t("COUPON_DETAIL_CREATE_BTN")
      }
      cancelText={t("COUPON_DETAIL_CANCEL_BTN")}
      confirmLoading={isCreating || isUpdating}
      width={800}
    >
      <Form
        form={form}
        layout="vertical"
        initialValues={{
          enabled: true,
          linePriority: 1,
          selectionStrategy: "HIGHEST_PRICE_FIRST",
        }}
      >
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_ENABLED_LABEL")}
              name="enabled"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_PRIORITY_LABEL")}
              name="linePriority"
              rules={[{ required: true, message: t("PRIORITY_REQUIRED") }]}
            >
              <InputNumber min={1} style={{ width: "100%" }} />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_TARGET_TYPE_LABEL")}
              name="targetType"
              rules={[{ required: true, message: t("TARGET_TYPE_REQUIRED") }]}
            >
              <Select placeholder={t("SELECT_TARGET_PLACEHOLDER")}>
                <Option value="ORDER">{t("TARGET_ORDER")}</Option>
                <Option value="SEAT_TYPE">{t("TARGET_SEAT_TYPE")}</Option>
                <Option value="SERVICE">{t("TARGET_SERVICE")}</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_REF_ID_LABEL")}
              name="targetRefId"
              tooltip={
                targetType === "ORDER"
                  ? t("REF_ID_TOOLTIP_ORDER")
                  : targetType === "SEAT_TYPE"
                    ? t("REF_ID_TOOLTIP_SEAT_TYPE")
                    : t("REF_ID_TOOLTIP_SERVICE")
              }
              rules={[
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    const currentTargetType = getFieldValue("targetType");

                    // Bắt buộc phải chọn ID tham chiếu khi targetType là SEAT_TYPE hoặc SERVICE
                    if (
                      (currentTargetType === "SEAT_TYPE" ||
                        currentTargetType === "SERVICE") &&
                      !value
                    ) {
                      return Promise.reject(
                        new Error(
                          currentTargetType === "SEAT_TYPE"
                            ? t("SEAT_TYPE_REQUIRED")
                            : t("SERVICE_REQUIRED")
                        )
                      );
                    }

                    return Promise.resolve();
                  },
                }),
              ]}
            >
              {targetType === "ORDER" ? (
                <Input
                  disabled
                  placeholder={t("NOT_REQUIRED_FOR_ORDER")}
                  style={{ width: "100%" }}
                />
              ) : targetType === "SEAT_TYPE" ? (
                <Select
                  placeholder={t("SELECT_SEAT_TYPE_PLACEHOLDER")}
                  style={{ width: "100%" }}
                  allowClear
                  loading={isLoadingSeatTypes}
                >
                  {seatTypeOptions.map((option) => (
                    <Option key={option.key} value={option.id}>
                      {getSeatTypeName(option.id)}
                    </Option>
                  ))}
                </Select>
              ) : (
                <Select
                  placeholder={t("SELECT_SERVICE_PLACEHOLDER")}
                  style={{ width: "100%" }}
                  allowClear
                  loading={isLoadingServices}
                  showSearch
                  optionFilterProp="label"
                  filterOption={(input, option) => {
                    return (
                      (option?.label as string)
                        ?.toLowerCase()
                        .includes(input.toLowerCase()) || false
                    );
                  }}
                >
                  {additionalServices
                    .filter((service) => service.status) // Only show active services
                    .map((service) => (
                      <Option
                        key={service.id}
                        value={service.id}
                        label={`${service.name} (${service.type})`}
                      >
                        {service.name} ({service.type})
                      </Option>
                    ))}
                </Select>
              )}
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_BENEFIT_TYPE_LABEL")}
              name="benefitType"
              rules={[{ required: true, message: t("BENEFIT_TYPE_REQUIRED") }]}
            >
              <Select placeholder={t("SELECT_BENEFIT_TYPE_PLACEHOLDER")}>
                <Option value="DISCOUNT_PERCENT">
                  {t("BENEFIT_DISCOUNT_PERCENT")}
                </Option>
                <Option value="DISCOUNT_AMOUNT">
                  {t("BENEFIT_DISCOUNT_AMOUNT")}
                </Option>
                <Option value="FREE_PRODUCT">
                  {t("BENEFIT_FREE_PRODUCT")}
                </Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={12}>
            {benefitType === "DISCOUNT_PERCENT" && (
              <Form.Item
                label={t("COUPON_DETAIL_PERCENT_LABEL")}
                name="percent"
                rules={[
                  { required: true, message: t("PERCENT_REQUIRED") },
                  {
                    type: "number",
                    min: 0.01,
                    max: 100,
                    message: t("PERCENT_RANGE_MESSAGE"),
                  },
                ]}
              >
                <InputNumber
                  min={0}
                  max={100}
                  suffix="%"
                  style={{ width: "100%" }}
                />
              </Form.Item>
            )}
            {benefitType === "DISCOUNT_AMOUNT" && (
              <Form.Item
                label={t("COUPON_DETAIL_AMOUNT_LABEL")}
                name="amount"
                rules={[
                  { required: true, message: t("AMOUNT_REQUIRED") },
                  {
                    type: "number",
                    min: 1,
                    message: t("AMOUNT_MIN_MESSAGE"),
                  },
                ]}
              >
                <InputNumber min={0} suffix="VND" style={{ width: "100%" }} />
              </Form.Item>
            )}
            {benefitType === "FREE_PRODUCT" && (
              <>
                <Form.Item
                  label={t("COUPON_DETAIL_GIFT_PRODUCT_LABEL")}
                  name="giftServiceId"
                  rules={[
                    { required: true, message: t("GIFT_PRODUCT_REQUIRED") },
                  ]}
                >
                  <ProductSelect
                    placeholder={t("SELECT_GIFT_PRODUCT_PLACEHOLDER")}
                    style={{ width: "100%" }}
                    allowClear
                  />
                </Form.Item>
              </>
            )}
          </Col>
        </Row>

        {benefitType === "FREE_PRODUCT" && (
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={t("COUPON_DETAIL_GIFT_QUANTITY_LABEL")}
                name="giftQuantity"
                rules={[
                  { required: true, message: t("GIFT_QUANTITY_REQUIRED") },
                  {
                    type: "number",
                    min: 1,
                    message: t("GIFT_QUANTITY_MIN_MESSAGE"),
                  },
                ]}
              >
                <InputNumber min={1} style={{ width: "100%" }} />
              </Form.Item>
            </Col>
          </Row>
        )}

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_LINE_MAX_DISCOUNT_LABEL")}
              name="lineMaxDiscount"
              tooltip={t("LINE_MAX_DISCOUNT_TOOLTIP")}
            >
              <InputNumber min={0} suffix="VND" style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_MIN_QUANTITY_LABEL")}
              name="minQuantity"
              tooltip={t("MIN_QUANTITY_TOOLTIP")}
            >
              <InputNumber min={1} style={{ width: "100%" }} />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_LIMIT_QUANTITY_LABEL")}
              name="limitQuantityApplied"
              tooltip={t("LIMIT_QUANTITY_TOOLTIP")}
            >
              <InputNumber min={1} style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_MIN_ORDER_TOTAL_LABEL")}
              name="minOrderTotal"
              tooltip={t("MIN_ORDER_TOTAL_TOOLTIP")}
            >
              <InputNumber min={0} suffix="VND" style={{ width: "100%" }} />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_USAGE_LIMIT_LABEL")}
              name="detailUsageLimit"
              tooltip={t("USAGE_LIMIT_TOOLTIP")}
            >
              <InputNumber min={1} style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_SELECTION_STRATEGY_LABEL")}
              name="selectionStrategy"
              tooltip={t("SELECTION_STRATEGY_TOOLTIP")}
            >
              <Select>
                <Option value="HIGHEST_PRICE_FIRST">
                  {t("STRATEGY_HIGHEST_PRICE_FIRST")}
                </Option>
                <Option value="LOWEST_PRICE_FIRST">
                  {t("STRATEGY_LOWEST_PRICE_FIRST")}
                </Option>
                <Option value="FIFO">{t("STRATEGY_FIFO")}</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item label={t("COUPON_DETAIL_NOTES_LABEL")} name="notes">
          <TextArea rows={3} placeholder={t("NOTES_PLACEHOLDER")} />
        </Form.Item>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_START_DATE_LABEL")}
              name="startDate"
              tooltip={t("START_DATE_TOOLTIP")}
              rules={[
                {
                  required: true,
                  message: t("COUPON_DETAIL_START_DATE_REQUIRED"),
                },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || !dayjs.isDayjs(value)) {
                      return Promise.resolve();
                    }

                    // Validate against parent coupon start date
                    if (coupon?.startAt) {
                      const parentStartDate = dayjs(coupon.startAt);
                      if (value.isBefore(parentStartDate, "day")) {
                        return Promise.reject(
                          new Error(
                            `${t("COUPON_DETAIL_START_DATE_AFTER_PARENT_START")} (${parentStartDate.format("DD/MM/YYYY")})`
                          )
                        );
                      }
                    }

                    // Validate against parent coupon end date
                    if (coupon?.endAt) {
                      const parentEndDate = dayjs(coupon.endAt);
                      if (value.isAfter(parentEndDate, "day")) {
                        return Promise.reject(
                          new Error(
                            `${t("COUPON_DETAIL_START_DATE_BEFORE_PARENT_END")} (${parentEndDate.format("DD/MM/YYYY")})`
                          )
                        );
                      }
                    }

                    // Validate against form end date
                    const endDate = getFieldValue("endDate");
                    if (
                      endDate &&
                      dayjs.isDayjs(endDate) &&
                      value.isAfter(endDate, "day")
                    ) {
                      return Promise.reject(
                        new Error(t("START_DATE_BEFORE_END_DATE"))
                      );
                    }

                    return Promise.resolve();
                  },
                }),
              ]}
            >
              <DatePicker
                style={{ width: "100%" }}
                placeholder={t("SELECT_DETAIL_START_DATE")}
                format="DD/MM/YYYY"
                disabledDate={(current) => {
                  if (!current) return false;

                  // Disable dates before parent coupon start date
                  if (
                    coupon?.startDate &&
                    current.isBefore(dayjs(coupon.startDate), "day")
                  ) {
                    return true;
                  }

                  // Disable dates after parent coupon end date
                  if (
                    coupon?.endDate &&
                    current.isAfter(dayjs(coupon.endDate), "day")
                  ) {
                    return true;
                  }

                  return false;
                }}
              />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label={t("COUPON_DETAIL_END_DATE_LABEL")}
              name="endDate"
              tooltip={t("END_DATE_TOOLTIP")}
              rules={[
                {
                  required: true,
                  message: t("COUPON_DETAIL_END_DATE_REQUIRED"),
                },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || !dayjs.isDayjs(value)) {
                      return Promise.resolve();
                    }

                    // Validate against parent coupon start date
                    if (coupon?.startDate) {
                      const parentStartDate = dayjs(coupon.startDate);
                      if (value.isBefore(parentStartDate, "day")) {
                        return Promise.reject(
                          new Error(
                            `${t("COUPON_DETAIL_END_DATE_AFTER_PARENT_START")} (${parentStartDate.format("DD/MM/YYYY")})`
                          )
                        );
                      }
                    }

                    // Validate against parent coupon end date
                    if (coupon?.endDate) {
                      const parentEndDate = dayjs(coupon.endDate);
                      if (value.isAfter(parentEndDate, "day")) {
                        return Promise.reject(
                          new Error(
                            `${t("COUPON_DETAIL_END_DATE_BEFORE_PARENT_END")} (${parentEndDate.format("DD/MM/YYYY")})`
                          )
                        );
                      }
                    }

                    // Validate against form start date
                    const startDate = getFieldValue("startDate");
                    if (
                      startDate &&
                      dayjs.isDayjs(startDate) &&
                      value.isBefore(startDate, "day")
                    ) {
                      return Promise.reject(
                        new Error(t("END_DATE_AFTER_START_DATE"))
                      );
                    }

                    return Promise.resolve();
                  },
                }),
              ]}
            >
              <DatePicker
                style={{ width: "100%" }}
                placeholder={t("SELECT_DETAIL_END_DATE")}
                format="DD/MM/YYYY"
                disabledDate={(current) => {
                  if (!current) return false;

                  // Disable dates before parent coupon start date
                  if (
                    coupon?.startDate &&
                    current.isBefore(dayjs(coupon.startDate), "day")
                  ) {
                    return true;
                  }

                  // Disable dates after parent coupon end date
                  if (
                    coupon?.endDate &&
                    current.isAfter(dayjs(coupon.endDate), "day")
                  ) {
                    return true;
                  }

                  return false;
                }}
              />
            </Form.Item>
          </Col>
        </Row>
      </Form>
    </Modal>
  );
};

export default CouponDetailModal;
